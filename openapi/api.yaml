openapi: 3.0.3
info:
  title: Room Service
  description: Room service for Love Hotel24
  version: 1.0.0
  
  
servers:
  - url: 'https://localhost:8082'

paths:
  /v1/roomtype:
    post:
      summary: "Create a new room type"
      operationId: "createRoomType"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoomType"
      responses:
        "201":
          description: "Room type created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomTypeId"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - onlyAdmin: []
    parameters:
      - name: offset
        in: query
        schema:
          type: integer
        description: "The number of items to skip before starting to collect the result"
      - name: limit
        in: query
        schema:
          type: integer
        description: "The numbers of items to return"
    get:
      summary: "Get All RoomType"
      operationId: "getAllRoomType"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoomType"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/roomtype/{RoomTypeId}:
    parameters:
      - name: RoomTypeId
        in: path
        description: The ID of the room type
        required: true
        schema:
          type: string
        example: e1cb23d0-6cbe-4a29-b586-bfa424bc93fd
    get:
      summary: "Get a room type by ID"
      operationId: "getRoomTypeById"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomType"
        "404":
          description: "Room type not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: "Delete Room Type By RoomType Id"
      operationId: "deleteRoomTypeById"
      responses:
        "204":
          description: Room type deleted successfully
        "404":
          description: "Room type not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: "Update a room type by ID"
      operationId: "updateRoomTypeById"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomType'
      responses:
        200:
          description: "Room type updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomTypeId'
        "404":
          description: "Room type not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/roomtype/upload:
    post:
      summary: "Upload Room Type Photos"
      operationId: "uploadRoomTypePhotos"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photos:
                  type: array
                  items:
                    type: string
                    format: binary

      responses:
        "201":
          description: "Photo uploaded successfully"
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: array
                    items:
                      type: string
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/room:
    post:
      summary: "Create a new room"
      operationId: "createRoom"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Room"
      responses:
        "201":
          description: "Room created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoomId"
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
      - name: offset
        in: query
        schema:
          type: integer
        description: "The number of items to skip before starting to collect the result"
      - name: limit
        in: query
        schema:
          type: integer
        description: "The numbers of items to return"
    get:
      summary: "Get All Room"
      operationId: "getAllRoom"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Room"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/room/{RoomId}:
    parameters:
      - name: RoomId
        in: path
        description: The ID of the room
        required: true
        schema:
          type: string
        example: e1cb23d0-6cbe-4a29-b586-bfa424bc93fd
    get:
      summary: "Get a room by ID"
      operationId: "getRoomById"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
        "404":
          description: "Room not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: "Delete Room By Room Id"
      operationId: "deleteRoomById"
      responses:
        "204":
          description: Room deleted successfully
        "404":
          description: "Room not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: "Update a room by ID"
      operationId: "updateRoomById"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        200:
          description: "Room updated successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomId'
        "404":
          description: "Room not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    RoomTypeId:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
    RoomId:
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
    RoomType:
      x-go-type: models.RoomType
      x-go-type-import:
        name: RoomType
        path: github.com/lovehotel24/room-service/pkg/models
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        description:
          type: "string"
        images:
          type: "array"
          items:
            type: "string"
        price:
          type: "number"
    Room:
      x-go-type: models.Room
      x-go-type-import:
        name: Room
        path: github.com/lovehotel24/room-service/pkg/models
      type: object
      properties:
        id:
          type: "string"
          format: "uuid"
        number:
          type: "string"
        roomTypeId:
          type: "string"
          format: "uuid"
        status:
          type: "string"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message