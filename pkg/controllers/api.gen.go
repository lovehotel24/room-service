// Package controllers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package controllers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/lovehotel24/room-service/pkg/models"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OnlyAdminScopes = "onlyAdmin.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Room defines model for Room.
type Room = models.Room

// RoomId defines model for RoomId.
type RoomId struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// RoomType defines model for RoomType.
type RoomType = models.RoomType

// RoomTypeId defines model for RoomTypeId.
type RoomTypeId struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// GetAllRoomParams defines parameters for GetAllRoom.
type GetAllRoomParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateRoomParams defines parameters for CreateRoom.
type CreateRoomParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAllRoomTypeParams defines parameters for GetAllRoomType.
type GetAllRoomTypeParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateRoomTypeParams defines parameters for CreateRoomType.
type CreateRoomTypeParams struct {
	// Offset The number of items to skip before starting to collect the result
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// UploadRoomTypePhotosMultipartBody defines parameters for UploadRoomTypePhotos.
type UploadRoomTypePhotosMultipartBody struct {
	Photos *[]openapi_types.File `json:"photos,omitempty"`
}

// CreateRoomJSONRequestBody defines body for CreateRoom for application/json ContentType.
type CreateRoomJSONRequestBody = Room

// UpdateRoomByIdJSONRequestBody defines body for UpdateRoomById for application/json ContentType.
type UpdateRoomByIdJSONRequestBody = Room

// CreateRoomTypeJSONRequestBody defines body for CreateRoomType for application/json ContentType.
type CreateRoomTypeJSONRequestBody = RoomType

// UploadRoomTypePhotosMultipartRequestBody defines body for UploadRoomTypePhotos for multipart/form-data ContentType.
type UploadRoomTypePhotosMultipartRequestBody UploadRoomTypePhotosMultipartBody

// UpdateRoomTypeByIdJSONRequestBody defines body for UpdateRoomTypeById for application/json ContentType.
type UpdateRoomTypeByIdJSONRequestBody = RoomType

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get All Room
	// (GET /v1/room)
	GetAllRoom(ctx echo.Context, params GetAllRoomParams) error
	// Create a new room
	// (POST /v1/room)
	CreateRoom(ctx echo.Context, params CreateRoomParams) error
	// Delete Room By Room Id
	// (DELETE /v1/room/{RoomId})
	DeleteRoomById(ctx echo.Context, roomId string) error
	// Get a room by ID
	// (GET /v1/room/{RoomId})
	GetRoomById(ctx echo.Context, roomId string) error
	// Update a room by ID
	// (PUT /v1/room/{RoomId})
	UpdateRoomById(ctx echo.Context, roomId string) error
	// Get All RoomType
	// (GET /v1/roomtype)
	GetAllRoomType(ctx echo.Context, params GetAllRoomTypeParams) error
	// Create a new room type
	// (POST /v1/roomtype)
	CreateRoomType(ctx echo.Context, params CreateRoomTypeParams) error
	// Upload Room Type Photos
	// (POST /v1/roomtype/upload)
	UploadRoomTypePhotos(ctx echo.Context) error
	// Delete Room Type By RoomType Id
	// (DELETE /v1/roomtype/{RoomTypeId})
	DeleteRoomTypeById(ctx echo.Context, roomTypeId string) error
	// Get a room type by ID
	// (GET /v1/roomtype/{RoomTypeId})
	GetRoomTypeById(ctx echo.Context, roomTypeId string) error
	// Update a room type by ID
	// (PUT /v1/roomtype/{RoomTypeId})
	UpdateRoomTypeById(ctx echo.Context, roomTypeId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllRoom converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllRoom(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllRoomParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllRoom(ctx, params)
	return err
}

// CreateRoom converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRoom(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRoomParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRoom(ctx, params)
	return err
}

// DeleteRoomById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoomById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomId", ctx.Param("RoomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoomById(ctx, roomId)
	return err
}

// GetRoomById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomId", ctx.Param("RoomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomById(ctx, roomId)
	return err
}

// UpdateRoomById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoomById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomId" -------------
	var roomId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomId", ctx.Param("RoomId"), &roomId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoomById(ctx, roomId)
	return err
}

// GetAllRoomType converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllRoomType(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllRoomTypeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllRoomType(ctx, params)
	return err
}

// CreateRoomType converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRoomType(ctx echo.Context) error {
	var err error

	ctx.Set(OnlyAdminScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRoomTypeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRoomType(ctx, params)
	return err
}

// UploadRoomTypePhotos converts echo context to params.
func (w *ServerInterfaceWrapper) UploadRoomTypePhotos(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadRoomTypePhotos(ctx)
	return err
}

// DeleteRoomTypeById converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRoomTypeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomTypeId" -------------
	var roomTypeId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomTypeId", ctx.Param("RoomTypeId"), &roomTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRoomTypeById(ctx, roomTypeId)
	return err
}

// GetRoomTypeById converts echo context to params.
func (w *ServerInterfaceWrapper) GetRoomTypeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomTypeId" -------------
	var roomTypeId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomTypeId", ctx.Param("RoomTypeId"), &roomTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRoomTypeById(ctx, roomTypeId)
	return err
}

// UpdateRoomTypeById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRoomTypeById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "RoomTypeId" -------------
	var roomTypeId string

	err = runtime.BindStyledParameterWithOptions("simple", "RoomTypeId", ctx.Param("RoomTypeId"), &roomTypeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RoomTypeId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRoomTypeById(ctx, roomTypeId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/room", wrapper.GetAllRoom)
	router.POST(baseURL+"/v1/room", wrapper.CreateRoom)
	router.DELETE(baseURL+"/v1/room/:RoomId", wrapper.DeleteRoomById)
	router.GET(baseURL+"/v1/room/:RoomId", wrapper.GetRoomById)
	router.PUT(baseURL+"/v1/room/:RoomId", wrapper.UpdateRoomById)
	router.GET(baseURL+"/v1/roomtype", wrapper.GetAllRoomType)
	router.POST(baseURL+"/v1/roomtype", wrapper.CreateRoomType)
	router.POST(baseURL+"/v1/roomtype/upload", wrapper.UploadRoomTypePhotos)
	router.DELETE(baseURL+"/v1/roomtype/:RoomTypeId", wrapper.DeleteRoomTypeById)
	router.GET(baseURL+"/v1/roomtype/:RoomTypeId", wrapper.GetRoomTypeById)
	router.PUT(baseURL+"/v1/roomtype/:RoomTypeId", wrapper.UpdateRoomTypeById)

}

type GetAllRoomRequestObject struct {
	Params GetAllRoomParams
}

type GetAllRoomResponseObject interface {
	VisitGetAllRoomResponse(w http.ResponseWriter) error
}

type GetAllRoom200JSONResponse []Room

func (response GetAllRoom200JSONResponse) VisitGetAllRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllRoomdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllRoomdefaultJSONResponse) VisitGetAllRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRoomRequestObject struct {
	Params CreateRoomParams
	Body   *CreateRoomJSONRequestBody
}

type CreateRoomResponseObject interface {
	VisitCreateRoomResponse(w http.ResponseWriter) error
}

type CreateRoom201JSONResponse RoomId

func (response CreateRoom201JSONResponse) VisitCreateRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoom400JSONResponse Error

func (response CreateRoom400JSONResponse) VisitCreateRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoomdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRoomdefaultJSONResponse) VisitCreateRoomResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRoomByIdRequestObject struct {
	RoomId string `json:"RoomId"`
}

type DeleteRoomByIdResponseObject interface {
	VisitDeleteRoomByIdResponse(w http.ResponseWriter) error
}

type DeleteRoomById204Response struct {
}

func (response DeleteRoomById204Response) VisitDeleteRoomByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRoomById404JSONResponse Error

func (response DeleteRoomById404JSONResponse) VisitDeleteRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoomByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteRoomByIddefaultJSONResponse) VisitDeleteRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRoomByIdRequestObject struct {
	RoomId string `json:"RoomId"`
}

type GetRoomByIdResponseObject interface {
	VisitGetRoomByIdResponse(w http.ResponseWriter) error
}

type GetRoomById200JSONResponse Room

func (response GetRoomById200JSONResponse) VisitGetRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomById404JSONResponse Error

func (response GetRoomById404JSONResponse) VisitGetRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRoomByIddefaultJSONResponse) VisitGetRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRoomByIdRequestObject struct {
	RoomId string `json:"RoomId"`
	Body   *UpdateRoomByIdJSONRequestBody
}

type UpdateRoomByIdResponseObject interface {
	VisitUpdateRoomByIdResponse(w http.ResponseWriter) error
}

type UpdateRoomById200JSONResponse RoomId

func (response UpdateRoomById200JSONResponse) VisitUpdateRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomById400JSONResponse Error

func (response UpdateRoomById400JSONResponse) VisitUpdateRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomById404JSONResponse Error

func (response UpdateRoomById404JSONResponse) VisitUpdateRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRoomByIddefaultJSONResponse) VisitUpdateRoomByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetAllRoomTypeRequestObject struct {
	Params GetAllRoomTypeParams
}

type GetAllRoomTypeResponseObject interface {
	VisitGetAllRoomTypeResponse(w http.ResponseWriter) error
}

type GetAllRoomType200JSONResponse []RoomType

func (response GetAllRoomType200JSONResponse) VisitGetAllRoomTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllRoomTypedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetAllRoomTypedefaultJSONResponse) VisitGetAllRoomTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRoomTypeRequestObject struct {
	Params CreateRoomTypeParams
	Body   *CreateRoomTypeJSONRequestBody
}

type CreateRoomTypeResponseObject interface {
	VisitCreateRoomTypeResponse(w http.ResponseWriter) error
}

type CreateRoomType201JSONResponse RoomTypeId

func (response CreateRoomType201JSONResponse) VisitCreateRoomTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoomType400JSONResponse Error

func (response CreateRoomType400JSONResponse) VisitCreateRoomTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoomTypedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRoomTypedefaultJSONResponse) VisitCreateRoomTypeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UploadRoomTypePhotosRequestObject struct {
	Body *multipart.Reader
}

type UploadRoomTypePhotosResponseObject interface {
	VisitUploadRoomTypePhotosResponse(w http.ResponseWriter) error
}

type UploadRoomTypePhotos201JSONResponse struct {
	Url *[]string `json:"url,omitempty"`
}

func (response UploadRoomTypePhotos201JSONResponse) VisitUploadRoomTypePhotosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UploadRoomTypePhotos400JSONResponse Error

func (response UploadRoomTypePhotos400JSONResponse) VisitUploadRoomTypePhotosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UploadRoomTypePhotosdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UploadRoomTypePhotosdefaultJSONResponse) VisitUploadRoomTypePhotosResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteRoomTypeByIdRequestObject struct {
	RoomTypeId string `json:"RoomTypeId"`
}

type DeleteRoomTypeByIdResponseObject interface {
	VisitDeleteRoomTypeByIdResponse(w http.ResponseWriter) error
}

type DeleteRoomTypeById204Response struct {
}

func (response DeleteRoomTypeById204Response) VisitDeleteRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRoomTypeById404JSONResponse Error

func (response DeleteRoomTypeById404JSONResponse) VisitDeleteRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoomTypeByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteRoomTypeByIddefaultJSONResponse) VisitDeleteRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetRoomTypeByIdRequestObject struct {
	RoomTypeId string `json:"RoomTypeId"`
}

type GetRoomTypeByIdResponseObject interface {
	VisitGetRoomTypeByIdResponse(w http.ResponseWriter) error
}

type GetRoomTypeById200JSONResponse RoomType

func (response GetRoomTypeById200JSONResponse) VisitGetRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomTypeById404JSONResponse Error

func (response GetRoomTypeById404JSONResponse) VisitGetRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRoomTypeByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetRoomTypeByIddefaultJSONResponse) VisitGetRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateRoomTypeByIdRequestObject struct {
	RoomTypeId string `json:"RoomTypeId"`
	Body       *UpdateRoomTypeByIdJSONRequestBody
}

type UpdateRoomTypeByIdResponseObject interface {
	VisitUpdateRoomTypeByIdResponse(w http.ResponseWriter) error
}

type UpdateRoomTypeById200JSONResponse RoomTypeId

func (response UpdateRoomTypeById200JSONResponse) VisitUpdateRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomTypeById400JSONResponse Error

func (response UpdateRoomTypeById400JSONResponse) VisitUpdateRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomTypeById404JSONResponse Error

func (response UpdateRoomTypeById404JSONResponse) VisitUpdateRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoomTypeByIddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateRoomTypeByIddefaultJSONResponse) VisitUpdateRoomTypeByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get All Room
	// (GET /v1/room)
	GetAllRoom(ctx context.Context, request GetAllRoomRequestObject) (GetAllRoomResponseObject, error)
	// Create a new room
	// (POST /v1/room)
	CreateRoom(ctx context.Context, request CreateRoomRequestObject) (CreateRoomResponseObject, error)
	// Delete Room By Room Id
	// (DELETE /v1/room/{RoomId})
	DeleteRoomById(ctx context.Context, request DeleteRoomByIdRequestObject) (DeleteRoomByIdResponseObject, error)
	// Get a room by ID
	// (GET /v1/room/{RoomId})
	GetRoomById(ctx context.Context, request GetRoomByIdRequestObject) (GetRoomByIdResponseObject, error)
	// Update a room by ID
	// (PUT /v1/room/{RoomId})
	UpdateRoomById(ctx context.Context, request UpdateRoomByIdRequestObject) (UpdateRoomByIdResponseObject, error)
	// Get All RoomType
	// (GET /v1/roomtype)
	GetAllRoomType(ctx context.Context, request GetAllRoomTypeRequestObject) (GetAllRoomTypeResponseObject, error)
	// Create a new room type
	// (POST /v1/roomtype)
	CreateRoomType(ctx context.Context, request CreateRoomTypeRequestObject) (CreateRoomTypeResponseObject, error)
	// Upload Room Type Photos
	// (POST /v1/roomtype/upload)
	UploadRoomTypePhotos(ctx context.Context, request UploadRoomTypePhotosRequestObject) (UploadRoomTypePhotosResponseObject, error)
	// Delete Room Type By RoomType Id
	// (DELETE /v1/roomtype/{RoomTypeId})
	DeleteRoomTypeById(ctx context.Context, request DeleteRoomTypeByIdRequestObject) (DeleteRoomTypeByIdResponseObject, error)
	// Get a room type by ID
	// (GET /v1/roomtype/{RoomTypeId})
	GetRoomTypeById(ctx context.Context, request GetRoomTypeByIdRequestObject) (GetRoomTypeByIdResponseObject, error)
	// Update a room type by ID
	// (PUT /v1/roomtype/{RoomTypeId})
	UpdateRoomTypeById(ctx context.Context, request UpdateRoomTypeByIdRequestObject) (UpdateRoomTypeByIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAllRoom operation middleware
func (sh *strictHandler) GetAllRoom(ctx echo.Context, params GetAllRoomParams) error {
	var request GetAllRoomRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllRoom(ctx.Request().Context(), request.(GetAllRoomRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllRoom")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllRoomResponseObject); ok {
		return validResponse.VisitGetAllRoomResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRoom operation middleware
func (sh *strictHandler) CreateRoom(ctx echo.Context, params CreateRoomParams) error {
	var request CreateRoomRequestObject

	request.Params = params

	var body CreateRoomJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRoom(ctx.Request().Context(), request.(CreateRoomRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRoom")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRoomResponseObject); ok {
		return validResponse.VisitCreateRoomResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRoomById operation middleware
func (sh *strictHandler) DeleteRoomById(ctx echo.Context, roomId string) error {
	var request DeleteRoomByIdRequestObject

	request.RoomId = roomId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRoomById(ctx.Request().Context(), request.(DeleteRoomByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRoomById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoomByIdResponseObject); ok {
		return validResponse.VisitDeleteRoomByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoomById operation middleware
func (sh *strictHandler) GetRoomById(ctx echo.Context, roomId string) error {
	var request GetRoomByIdRequestObject

	request.RoomId = roomId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoomById(ctx.Request().Context(), request.(GetRoomByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoomById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoomByIdResponseObject); ok {
		return validResponse.VisitGetRoomByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRoomById operation middleware
func (sh *strictHandler) UpdateRoomById(ctx echo.Context, roomId string) error {
	var request UpdateRoomByIdRequestObject

	request.RoomId = roomId

	var body UpdateRoomByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRoomById(ctx.Request().Context(), request.(UpdateRoomByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRoomById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRoomByIdResponseObject); ok {
		return validResponse.VisitUpdateRoomByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllRoomType operation middleware
func (sh *strictHandler) GetAllRoomType(ctx echo.Context, params GetAllRoomTypeParams) error {
	var request GetAllRoomTypeRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllRoomType(ctx.Request().Context(), request.(GetAllRoomTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllRoomType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllRoomTypeResponseObject); ok {
		return validResponse.VisitGetAllRoomTypeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRoomType operation middleware
func (sh *strictHandler) CreateRoomType(ctx echo.Context, params CreateRoomTypeParams) error {
	var request CreateRoomTypeRequestObject

	request.Params = params

	var body CreateRoomTypeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRoomType(ctx.Request().Context(), request.(CreateRoomTypeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRoomType")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRoomTypeResponseObject); ok {
		return validResponse.VisitCreateRoomTypeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadRoomTypePhotos operation middleware
func (sh *strictHandler) UploadRoomTypePhotos(ctx echo.Context) error {
	var request UploadRoomTypePhotosRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UploadRoomTypePhotos(ctx.Request().Context(), request.(UploadRoomTypePhotosRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadRoomTypePhotos")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadRoomTypePhotosResponseObject); ok {
		return validResponse.VisitUploadRoomTypePhotosResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRoomTypeById operation middleware
func (sh *strictHandler) DeleteRoomTypeById(ctx echo.Context, roomTypeId string) error {
	var request DeleteRoomTypeByIdRequestObject

	request.RoomTypeId = roomTypeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRoomTypeById(ctx.Request().Context(), request.(DeleteRoomTypeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRoomTypeById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRoomTypeByIdResponseObject); ok {
		return validResponse.VisitDeleteRoomTypeByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRoomTypeById operation middleware
func (sh *strictHandler) GetRoomTypeById(ctx echo.Context, roomTypeId string) error {
	var request GetRoomTypeByIdRequestObject

	request.RoomTypeId = roomTypeId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRoomTypeById(ctx.Request().Context(), request.(GetRoomTypeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRoomTypeById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRoomTypeByIdResponseObject); ok {
		return validResponse.VisitGetRoomTypeByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRoomTypeById operation middleware
func (sh *strictHandler) UpdateRoomTypeById(ctx echo.Context, roomTypeId string) error {
	var request UpdateRoomTypeByIdRequestObject

	request.RoomTypeId = roomTypeId

	var body UpdateRoomTypeByIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRoomTypeById(ctx.Request().Context(), request.(UpdateRoomTypeByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRoomTypeById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRoomTypeByIdResponseObject); ok {
		return validResponse.VisitUpdateRoomTypeByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYzW7jNhB+FYLtUbYcx13s6pY0RWu0QIs2ewpyoKSRzV1KZPjjRgj07gWHsmNbcpxk",
	"46yL5BIrJDWcn2++mdEdzWSpZAWVNTS5oyabQ8nw8RetpfYPSksF2nLA5Uzm4H9zMJnmynJZ0SQcJrgX",
	"0ULqklmaUF7Z0zGNqK0VhH9hBpo2ES3BGDbbKWi5vXrVWM2rGW2aiGq4cVxDTpMr2l64PH7dRPRvKcuu",
	"1jz3f1eKOcfzrvCIVq5MAY3ubGkpy8tawfRxkoxl1pkeSc3qsEy/QGZpRG8HMzloF0uZgzBDtGJtZ8BL",
	"JbX18ipW+oPtCcXsnCZ0xu3cpcNMlrGQC5hLC2I8ib3SAwN6wTOI1ddZHMSjFl5AMOYZrupY0Qq8xMVt",
	"kRsh7vHtI6PDSzZrdbRQml5R7QLTmtUYUfRWz0Gleba+04b+CfFBW/fGqD31bXG6B96LxMov8aqQ3fTz",
	"l5FWEVJITf6QCyC/BTW9aG7F0jLyTzhHI7oAbYKAk+FoOPL+lQoqpjhN6OlwNDxtXYBax4sTtNg/zwAd",
	"5o1iXgdvJf0V7JkQLcI1GCUrEwwej0aBhCoLFb7JlBI8w3fjLyYALLDYBlB+1FDQhP4Q3/Nd3JJdjBd1",
	"sOOdtOmcP3+nuFYwJ+yT1Hjo9sCzPde5Cm4VZBZyAu2ZiBpXlkzXwUnkTAiy1F4xzUqwoA1NrrbjejkH",
	"EhBOZEHQK8RKYr5yRVIopAZiLNOWVzO/nkkhILPEzoFoMN5cjxia0BsHuqbLvKKyKAz4zXtbt8m+iXYr",
	"Yza00WCdrnbcJHjJ91x0HVElTQ+eftbALKzwdOPA2HOZ1y8WwxCDzepktYOmA9+TF71zmvcBB5MzQ5tz",
	"YlyWgTGFEwIJcfLEDHoWdM9ZTlo/H1PKBBwQRir4l+gQs2hFR/FdcGkTaFGAhS6ULnDdHzyvp3mXniY7",
	"ODXI6wvH5PBuQQ0qaUkhXZUfU0SCO5HDyHkdfqeo4a7CsNv1owOkc18BeOMh83WHYfaQtCbTi0fVnumF",
	"Z3osJ4GF4ZaVClsJOMnS8Wk+GnzIUhhM2PjTIP3p44dBWrDJeJJmn06LfFkTsIuK1turFgjrpNtTI1at",
	"kC8RrgdYn1XOttL6cFWiOTB0H6gKDu08jqrwxvMoQG4rldbKkW1HqT0dcjtfvE6XjJf9rzvlpQXv3fIj",
	"uuUVtg7DhSEWr981t9P0Lrbwnnpvn+/zCDKnua0xT2Ql6rO89JC7uvYQeqC5Rkd2KC12SkgWvmX0wu8z",
	"7i/j9NdcWmkeBGHphOWKaRsXUpeDnFm26YvNbyYqSFynvdUHlJRXDNNoz3elvk8q34raTS2dFk/50NX0",
	"RBNdR4K735G8VXu9U8K44VFGWph1wHp3zxePHAv94aeNhsg3338+RDWOfkjEaLWTIj7vnxZ3R2R0oHL2",
	"fafG4w3k2uiISj53fgyV5eWGyLYheNlBcgN2h22gmldA9r6G6W1Olseba5vj5Xq6haZOL5bZhq0GnVur",
	"TBLHQmZMzKWxycfRxzFtrpv/AgAA//8totc+JB4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
